[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Book",
    "section": "",
    "text": "主页 || 课程 || 视频 || 推文 || 资料",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Home</span>"
    ]
  },
  {
    "objectID": "body/01_intro.html",
    "href": "body/01_intro.html",
    "title": "2  创建流程",
    "section": "",
    "text": "2.1 使用模板创建书稿 (推荐)\nQuarto book 是一个基于 quarto 的书籍项目：你可以将多个章节文档通过一个名为 _quarto.yml 的文件组织成一本书，然后将其编译为一本电子书 (HTML 或 PDF 格式均可)，进而通过 GitHub Pages 发布。\n以本项目为例：\n创建一本 Quarto Book 非常简单。你可以使用 VScode 或 RStudio 来创建和编辑你的书籍项目。这里以 VScode 为例进行说明。\n你可以通过两种方式来创建 Quarto Book：\n对于初学者而言，建议采用第一种方式。你只需要将现有的模板项目克隆或下载到本地，然后简单修改相关配置和内容即可。\n在执行如下步骤之前，请先确保你已经完成了 环境配置 的相关工作。",
    "crumbs": [
      "**Quarto 简介**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>创建流程</span>"
    ]
  },
  {
    "objectID": "body/01_intro.html#使用模板创建书稿-推荐",
    "href": "body/01_intro.html#使用模板创建书稿-推荐",
    "title": "2  创建流程",
    "section": "",
    "text": "Clone 模板：\n\n将 quarto_book 仓库克隆或下载到本地。\n\n测试环境配置：\n\n在 VScode 中打开项目根目录，进而打开 _quarto.yml 文件。\n按快捷键 Ctrl+~ 打开 Terminal &gt;&gt; 输入 quarto render 即可开始编译。完成后项目根目录下会自动生成 /docs 子文件夹，其中包含编译后的 HTML 文件。\n通过我的电脑地址栏打开 /docs 文件夹，双击 index.html 文件即可在浏览器中预览书籍。 以上步骤若能成功完成，说明你的 Quarto 环境配置正常。\n\n修改书籍基本信息：\n\n在 VScode 中打开项目根目录下的 _quarto.yml 文件，修改书籍的标题、作者等信息。\n打开 index.qmd 文件，编辑书籍简介。\n\n撰写你的书稿：\n\n各章书稿存放于 body/ 目录下。你可以在该目录下创建新的 .md, .qmd 或 .ipynb 文件，或编辑现有的章节文件。\n完成后，请参照第 3 步，更新 _quarto.yml 文件中的章节列表。\n\n编译和预览书籍：\n\n在 VScode 中按 Ctrl+~ 打开 Terminal &gt;&gt; 输入 quarto render 即可重新编译书籍。\n预览方式同上，双击 /docs/index.html 文件即可在浏览器中查看最新编译结果。\n\nNote: 如果浏览器无法显示最新内容，请尝试清理浏览器缓存或使用无痕模式打开。 \n\n\n发布书籍：参见 使用 GitHub Pages 发布。",
    "crumbs": [
      "**Quarto 简介**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>创建流程</span>"
    ]
  },
  {
    "objectID": "body/01_intro.html#从头开始创建书稿",
    "href": "body/01_intro.html#从头开始创建书稿",
    "title": "2  创建流程",
    "section": "2.2 从头开始创建书稿",
    "text": "2.2 从头开始创建书稿\n虽然不建议初学者从头开始创建 Quarto Book 项目，但如果你希望完全自定义书籍结构和内容，可以按照以下步骤操作：\n\n在 VScode 中按 Ctrl+Shift+P，输入 Quarto: Create Project 来创建一个新的 Quarto Book 项目。\n在弹出的对话框中选择 Book 模板。\n输入项目名称和保存路径。\n打开生成的 _quarto.yml 文件，修改书籍的标题、作者等信息。\n编辑 index.qmd 文件，添加书籍的内容。\n编译和预览方式与「使用模板创建书稿」相同。",
    "crumbs": [
      "**Quarto 简介**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>创建流程</span>"
    ]
  },
  {
    "objectID": "body/01_intro.html#quarto-book-项目结构",
    "href": "body/01_intro.html#quarto-book-项目结构",
    "title": "2  创建流程",
    "section": "2.3 Quarto Book 项目结构",
    "text": "2.3 Quarto Book 项目结构\nQuarto book 本质上是将多个文档组织在一起，使它们能够作为一本书来编译和预览：\n\n支持多种文档格式，且可以同时使用多种格式的文档。包括：.qmd，.md，.Rmd 和 .ipynb 等。\n配置文件：Quarto Book 项目会通过 _quarto.yml 文件来定义书籍的元数据和结构。\nindex.qmd 文件：这是书籍的入口文件，通常包含书籍的封面和介绍等内容。编译时会将其作为书籍或网站的首页。\n\n一个典型的 Quarto Book 项目结构如下：\nquarto_book/\n├── _quarto.yml          # 配置文件，定义书籍的元数据和结构\n├── index.qmd           # 书籍的入口文件\n├── chapter1.qmd        # 第一章内容\n├── chapter2.qmd        # 第二章内容\n├── chapter3.qmd        # 第三章内容\n├── images/             # 存放书籍中使用的图片\n├── data/               # 存放书籍中使用的数据文件\n└── references.bib      # 参考文献文件（可选）\n如果章节较多，或希望每个章节有独立的目录，可以将章节文件放在 chapters/ 目录下，结构如下：\nquarto_book/\n├── _quarto.yml         # 配置文件，定义书籍的元数据和结构\n├── index.qmd           # 书籍的入口文件\n├── chapters/           # 存放章节文件\n│   ├── chapter1.qmd    # 第一章内容   \n│   ├── chapter2.qmd    # 第二章内容\n│   ├── chapter3.qmd    # 第三章内容\n├── images/             # 存放书籍中使用的图片\n├── data/               # 存放书籍中使用的数据文件\n└── references.bib      # 参考文献文件（可选）\n同理，你也可以为每个章节创建一个独立的目录，例如 chapter1/，chapter2/ 等，进而在 chapter1/ 目录下创建 data/, images/ 等子目录来组织相关资源。这样可以使项目结构更加清晰。",
    "crumbs": [
      "**Quarto 简介**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>创建流程</span>"
    ]
  },
  {
    "objectID": "body/01_intro.html#参考资料",
    "href": "body/01_intro.html#参考资料",
    "title": "2  创建流程",
    "section": "2.4 参考资料",
    "text": "2.4 参考资料\n\nquarto book: 官方指南\nQuarto 发布基础\ngithub pages",
    "crumbs": [
      "**Quarto 简介**",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>创建流程</span>"
    ]
  },
  {
    "objectID": "body/02_install_setting.html",
    "href": "body/02_install_setting.html",
    "title": "3  环境配置",
    "section": "",
    "text": "3.1 必要安装\n在 VScode 环境下高效编写和发布 Quarto Book，需要提前完成相关软件的安装与基本配置。以下流程适用于大部分 Windows、macOS 和 Linux 用户。",
    "crumbs": [
      "**Quarto 简介**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>环境配置</span>"
    ]
  },
  {
    "objectID": "body/02_install_setting.html#必要安装",
    "href": "body/02_install_setting.html#必要安装",
    "title": "3  环境配置",
    "section": "",
    "text": "3.1.1 安装 VScode 编辑器\n访问 Visual Studio Code 官网，下载安装最新版 VScode。建议安装稳定版，无需安装 Insiders 预览版。\n\n\n3.1.2 安装 Quarto\n访问 Quarto 官网，下载并安装适合你操作系统的 Quarto。安装后，建议在命令行（终端/PowerShell）中运行 quarto --version 检查是否安装成功。\n\n\n3.1.3 安装 VScode 插件\n在 VScode 左侧扩展（Extensions）面板搜索并安装下列插件：\n\nQuarto（官方插件，支持 .qmd 文件的语法高亮与预览）\nMarkdown All in One（增强 Markdown 编辑体验）\nJupyter（如需直接在 VScode 内编辑 .ipynb 文件）\nPython、R（分别对应需要用到的语言）\n\n如果你的书稿中不涉及 Python 或 R 代码块，可以不安装对应的插件。\n同理，如果书稿中涉及可执行的 Stata 代码块，则需安装 Stata 相关的插件。",
    "crumbs": [
      "**Quarto 简介**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>环境配置</span>"
    ]
  },
  {
    "objectID": "body/02_install_setting.html#可选安装",
    "href": "body/02_install_setting.html#可选安装",
    "title": "3  环境配置",
    "section": "3.2 可选安装",
    "text": "3.2 可选安装",
    "crumbs": [
      "**Quarto 简介**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>环境配置</span>"
    ]
  },
  {
    "objectID": "body/02_install_setting.html#安装-r-或-python-环境",
    "href": "body/02_install_setting.html#安装-r-或-python-环境",
    "title": "3  环境配置",
    "section": "3.3 安装 R 或 Python 环境",
    "text": "3.3 安装 R 或 Python 环境\n\n如果你的文档包含 R 代码块，需安装 R。\n如果包含 Python 代码块，需配置好 Python 运行环境。建议安装 Anaconda 套装，访问 Anaconda 官网 下载并安装。Anaconda 包含了 Python 及常用的数据科学库，安装后可通过 Anaconda Navigator 或命令行使用。\n\n国内用户，可以参照 6 Python：安装和环境配置 配置 Python 环境。\n\n\n\n3.3.1 Github 相关\n\ngithub 账号（推荐）\n\n如果你计划将 Quarto Book 发布到 GitHub 或其他代码托管平台，建议注册一个 GitHub 账号。注册后，你可以创建仓库来存储和管理你的 Quarto Book 项目。\n\ngithub desktop（推荐）\n\n如果你不熟悉 Git 命令行操作，可以安装 GitHub Desktop，它提供了图形化界面，方便进行版本控制和仓库管理。\n\n安装 Git（可选） 熟悉 Git 的用户，建议安装 Git 并在 VScode 中完成初步配置。这样可实现版本管理、远程仓库同步、多人协作等功能。",
    "crumbs": [
      "**Quarto 简介**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>环境配置</span>"
    ]
  },
  {
    "objectID": "body/02_install_setting.html#其它问题",
    "href": "body/02_install_setting.html#其它问题",
    "title": "3  环境配置",
    "section": "3.4 其它问题",
    "text": "3.4 其它问题\n\n3.4.1 配置环境变量（如有需要）\n确保 quarto、R、python 等命令可在终端/命令行直接调用。对于 Windows 用户，如出现命令无法识别，可在“系统环境变量”中添加相应路径。\n\n\n3.4.2 检查依赖是否正常\n在终端分别运行以下命令，确认环境配置成功：\nquarto --version\npython --version      # 若需支持 Python\nR --version           # 若需支持 R\njupyter --version     # 若需支持 .ipynb\n完成上述准备工作后，你就可以在 VScode 环境下流畅地新建、编辑和预览 Quarto Book 项目了。",
    "crumbs": [
      "**Quarto 简介**",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>环境配置</span>"
    ]
  },
  {
    "objectID": "body/03_YML_file.html",
    "href": "body/03_YML_file.html",
    "title": "4  _quarto.yml 文件",
    "section": "",
    "text": "4.1 简介\n_quarto.yml 文件是 Quarto Book 项目的配置文件，用于定义书籍的元数据、结构和输出格式。以下是一个简单的 _quarto.yml 文件示例：\n你还可以在 _quarto.yml 文件中添加更多配置选项，如自定义样式、引用管理、输出格式等。具体的配置选项可以参考 Quarto Book 官方指南。",
    "crumbs": [
      "**创建 Quarto-book**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>_quarto.yml 文件</span>"
    ]
  },
  {
    "objectID": "body/03_YML_file.html#简介",
    "href": "body/03_YML_file.html#简介",
    "title": "4  _quarto.yml 文件",
    "section": "",
    "text": "project:\n  type: book\n  output-dir: docs  # 输出目录，可以自定义\n\nbook:\n  title: \"你的书名\"\n  author: \"作者姓名\"\n  date: today\n  date-format: iso\n  chapters:\n    - index.qmd\n    - chapters/chapter1.qmd\n    - chapters/chapter2.qmd\n    - chapters/chapter3.qmd\n\n# 输出格式设置，可按需调整\nformat:\n  html:\n    toc: true\n    toc-depth: 3\n    number-sections: true\n    theme: cosmo\n    code-fold: true\n    code-summary: \"显示代码\"\n    df-print: paged\n    highlight-style: github\n  pdf:\n    documentclass: book\n    toc: true\n    toc-depth: 3\n    number-sections: true",
    "crumbs": [
      "**创建 Quarto-book**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>_quarto.yml 文件</span>"
    ]
  },
  {
    "objectID": "body/03_YML_file.html#实例",
    "href": "body/03_YML_file.html#实例",
    "title": "4  _quarto.yml 文件",
    "section": "4.2 实例",
    "text": "4.2 实例\n你也可以查看如下示例的 _quarto.yml 文件，从中截取你需要的部分：\n\nHadley Wickham, R for Data Science, 2024. Chapter 25: Quarto. Github.\n\n_quarto.yml\n\nNicholas Tierney. Quarto for Scientists . 2024 . book, github\n\n_quarto.yml\n\n连玉君, 2025, 数据分析与 Python 应用.\n\n_quarto.yml",
    "crumbs": [
      "**创建 Quarto-book**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>_quarto.yml 文件</span>"
    ]
  },
  {
    "objectID": "body/03_YML_file.html#更多配置选项",
    "href": "body/03_YML_file.html#更多配置选项",
    "title": "4  _quarto.yml 文件",
    "section": "4.3 更多配置选项",
    "text": "4.3 更多配置选项\n如果你想对 _quarto.yml 文件进行更深入的了解和配置，可以参考以下资源：\n\nQuarto Book 官方指南\nQuarto Book Options\nQuarto Book Configuration\nQuarto Book YAML Reference\n\n你也可以使用如下提示词，借助 ChatGPT, DeepSeek, 豆包等 AI 工具来学习和配置 _quarto.yml 文件：\n\n\n\n\n\n\n提示词\n\n\n\n\n分享一个完整的 quarto book 中的 _quarto.yml 配置讲义\n解释 _quarto.yml 文件中的每个配置项的作用\n如何在 _quarto.yml 文件中配置书籍网站主页的页脚\n如何设置代码块的语法高亮和折叠功能\n如何在 _quarto.yml 文件中添加自定义样式和主题",
    "crumbs": [
      "**创建 Quarto-book**",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>_quarto.yml 文件</span>"
    ]
  },
  {
    "objectID": "body/04_github_page.html",
    "href": "body/04_github_page.html",
    "title": "5  使用 GitHub Pages 发布",
    "section": "",
    "text": "5.1 发布流程\n本章以我的仓库 https://github.com/lianxhcn/quarto_book 为例，介绍如何使用 GitHub Desktop 创建 gh-pages 分支并完成 Quarto Book 的在线部署。\n完成后，你可以通过访问 https://lianxhcn.github.io/quarto_book/ 来查看部署效果。其他人可以通过该链接访问你的 Quarto Book。\n我们的目的是使用 docs 文件夹作为静态网页根目录，发布到 lianxhcn.github.io/quarto_book，推荐采用项目级 Pages方式，具体如下：",
    "crumbs": [
      "**创建 Quarto-book**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>使用 GitHub Pages 发布</span>"
    ]
  },
  {
    "objectID": "body/04_github_page.html#发布流程",
    "href": "body/04_github_page.html#发布流程",
    "title": "5  使用 GitHub Pages 发布",
    "section": "",
    "text": "5.1.1 步骤一：确保 docs 文件夹在主分支\n\n你已经把所有网页内容渲染到 docs，这是 GitHub Pages 推荐的目录名。\n\n\n\n5.1.2 步骤二：推送本地代码到 GitHub\n\n在 GitHub Desktop 中确认你的更改（见第二问）。\n确保主分支（main/master）与 GitHub 仓库同步。\n\n\n\n5.1.3 步骤三：在 GitHub 仓库中启用 Pages\n\n打开你的项目仓库页面： https://github.com/lianxhcn/quarto_book\n点击右上角的 Settings → 左侧栏选择 Pages 或 Pages（Beta）\n在 “Build and deployment” 下，Source 选择 “Deploy from a branch”\n选择：\n\nBranch：main（或你当前的主分支）\nFolder：/docs\n\n保存设置。\n\n\n\n5.1.4 步骤四：访问网页\n\n等待几分钟，GitHub 会自动生成页面。\n访问： https://lianxhcn.github.io/quarto_book/\n\n\n\n5.1.5 注意事项\n\n如果页面内容没更新，请确保每次用 quarto render 后及时将最新的 docs 文件夹推送到 GitHub。\n你可以通过更改 _quarto.yml 或其他源码，然后再次 render → push → 自动更新网页。",
    "crumbs": [
      "**创建 Quarto-book**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>使用 GitHub Pages 发布</span>"
    ]
  },
  {
    "objectID": "body/04_github_page.html#github-desktop-实现-pull-和-push",
    "href": "body/04_github_page.html#github-desktop-实现-pull-和-push",
    "title": "5  使用 GitHub Pages 发布",
    "section": "5.2 GitHub Desktop 实现 Pull 和 Push",
    "text": "5.2 GitHub Desktop 实现 Pull 和 Push\n以你的本地 D:\\Github_lianxh\\quarto_book 项目为例：\n\n5.2.1 初始设置（仅首次需要）\n\n打开 GitHub Desktop，File → Add local repository，选择你的本地文件夹。\n仓库面板左上角应看到 quarto_book 项目名，远程仓库自动连接到 https://github.com/lianxhcn/quarto_book。\n\n\n\n5.2.2 日常操作\nPull（拉取最新远程内容到本地）\n\n点击 GitHub Desktop 左上角的 “Current Branch”（确保在 main/master 分支）。\n点击右上角的 “Fetch origin”（如果有更新则会变成 “Pull origin”），点击它即可同步远程变更到本地。\n\nPush（推送本地更新到远程）\n\n正常编辑、修改、增加或删除文件。\n在 GitHub Desktop 主界面下方看到 “Changes” 列表，输入 Commit message（如 render new chapters），点击 “Commit to main”。\n提交后，界面会出现 “Push origin” 按钮，点击即可推送本地更改到 GitHub 仓库。\n\n\n\n5.2.3 补充说明\n\n新文件/文件夹：只要在本地新建（如新增章节），在 GitHub Desktop 中会自动识别到“Changes”，按上述流程提交。\n删除或重命名：同理，所有文件操作 GitHub Desktop 都会追踪。\n冲突：如遇 pull/push 冲突，按 GitHub Desktop 提示合并冲突后再 push。\n\n\n\n5.2.4 常见问题\n\ndocs 里无变化？ 确认用 quarto render 重新编译，且本地 docs 文件夹变动已被 Git 跟踪和推送。\n访问慢？ GitHub Pages 有时需几分钟才能看到更新。\n访问路径？ 若你以后需要发布为 lianxhcn.github.io 的主站，则结构和设置略有不同，目前发布到 lianxhcn.github.io/quarto_book 是标准做法。",
    "crumbs": [
      "**创建 Quarto-book**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>使用 GitHub Pages 发布</span>"
    ]
  },
  {
    "objectID": "body/04_github_page.html#参考文档",
    "href": "body/04_github_page.html#参考文档",
    "title": "5  使用 GitHub Pages 发布",
    "section": "5.3 参考文档",
    "text": "5.3 参考文档\n\nGitHub Pages 官方指南\nQuarto 官方关于发布到 GitHub Pages",
    "crumbs": [
      "**创建 Quarto-book**",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>使用 GitHub Pages 发布</span>"
    ]
  },
  {
    "objectID": "body/05_references.html",
    "href": "body/05_references.html",
    "title": "6  教程和参考资料",
    "section": "",
    "text": "6.1 Quarto Book 相关的资源",
    "crumbs": [
      "**参考资料**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>教程和参考资料</span>"
    ]
  },
  {
    "objectID": "body/05_references.html#quarto-book-相关的资源",
    "href": "body/05_references.html#quarto-book-相关的资源",
    "title": "6  教程和参考资料",
    "section": "",
    "text": "Quarto Book 官方指南 | 中文 | Options\nHow to self-publish a technical book on Leanpub and Amazon using Quarto\n李东风，2023，R 语言教程. 22 Quarto格式文件\nR for Data Science, 2024. Chapter 25: Quarto. Github, _quarto.yml",
    "crumbs": [
      "**参考资料**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>教程和参考资料</span>"
    ]
  },
  {
    "objectID": "body/05_references.html#发布",
    "href": "body/05_references.html#发布",
    "title": "6  教程和参考资料",
    "section": "6.2 发布",
    "text": "6.2 发布\n\nQuarto: Publishing to GitHub Pages\nHow to Create and Publish a Quarto Book on GitHub\nQuarto 官网：GitHub Pages\n\nNote:\n\n考虑到国内很多读者无法访问 GitHub Pages，可以使用 Gitee 或 Coding 等国内平台进行发布。\n我个人是将编译后的 docs 文件夹上传到 GitHub 的 gh-pages 分支中，这样可以直接通过 https://&lt;username&gt;.github.io/&lt;repository&gt;/ 访问。",
    "crumbs": [
      "**参考资料**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>教程和参考资料</span>"
    ]
  },
  {
    "objectID": "body/05_references.html#用-quarto-book-写的书",
    "href": "body/05_references.html#用-quarto-book-写的书",
    "title": "6  教程和参考资料",
    "section": "6.3 用 Quarto book 写的书",
    "text": "6.3 用 Quarto book 写的书\n你可以选择自己喜欢的风格，然后将对应的仓库克隆下来，修改 _quarto.yml 文件和 index.qmd 文件，添加自己的内容。\n\n数据分析与 Python 应用\n\n我自己写的第一本 Quarto Book，可以很好地支持中文。\n\nhttps://style.tidyverse.org/\n\n不涉及任何 R 代码的执行问题，可以视为一个 Quarto-book 模板\n\nR for Data Science | Code\nVisualization Curriculum | Code\nOscar Baruffa, 2024, Big Book for R. Read, Github\n\ninclude-after-body: footer.html\n\nThe Epidemiologist R Handbook, 2024. Read, Github\n\nR 安装和帮助文件等写的非常细致\n\nScheuch, C., Voigt, S., & Weiss, P. (2023). Tidy Finance with R (1st ed.). Chapman and Hall/CRC. -Link-. Read, github, Quarto book\n\n_quarto.yml\n\nNicholas Tierney. Quarto for Scientists . 2024 . book, github, _quarto.yml\n使用 Quarto Website 的形式写的书\n\nto be added\n\n更多：awesome-quarto",
    "crumbs": [
      "**参考资料**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>教程和参考资料</span>"
    ]
  },
  {
    "objectID": "body/05_references.html#一些-github-仓库",
    "href": "body/05_references.html#一些-github-仓库",
    "title": "6  教程和参考资料",
    "section": "6.4 一些 Github 仓库",
    "text": "6.4 一些 Github 仓库\n这些仓库提供了形式各样的 Quarto Book 模板，你可以根据自己的需要进行修改。\n\ncoatless-tutorials / quarto-book-template\n\nTemplate repository for creating a book powered by Quarto and Rendered by GitHub Actions onto GitHub Pages.\n介绍了如何使用 github page 发布你的书稿\n\ntufte-quarto → website\n\nTufte book layout for Quarto. 可以将部分图片显示在网页的右侧边栏处。\n\nNOAA-quarto-book\n\nA Quarto book project with html, pdf and Word output types.",
    "crumbs": [
      "**参考资料**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>教程和参考资料</span>"
    ]
  },
  {
    "objectID": "body/05_references.html#quarto-for-scientists-中提到的资料",
    "href": "body/05_references.html#quarto-for-scientists-中提到的资料",
    "title": "6  教程和参考资料",
    "section": "6.5 Quarto for Scientists 中提到的资料",
    "text": "6.5 Quarto for Scientists 中提到的资料\n\nSource: Nicholas Tierney. Quarto for Scientists . 2024 . book, github, _quarto.yml\n\nHere are some resources that I really liked for learning Quarto:\n\nThe Quarto “get started” guide\nThe Quarto guide “Quarto manuscripts”\nThe Quarto chapter in “R for data science”\nMaking shareable documents with Quarto from, from OpenScapes\nAlison Hill’s blog post: “we don’t talk about Quarto”\nMine Çentinkaya-Rundel’s talk “Quarto for academics”",
    "crumbs": [
      "**参考资料**",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>教程和参考资料</span>"
    ]
  },
  {
    "objectID": "body/A01_markdown.html",
    "href": "body/A01_markdown.html",
    "title": "7  Markdown",
    "section": "",
    "text": "7.1 何谓 Markdown？\nMarkdown 是一种轻量级的标记语言，允许你使用易读易写的纯文本格式编写文档，然后转换成结构化的 HTML, PDF, Word 等多种格式的文档。Markdown 语法简单易学，适合用来撰写笔记、文档、幻灯片等。\n大家在网上看到的很多博客文章，程序说明文档，甚至是在线书籍 (Python for Data Analysis, 3E)，都是用 Markdown 写的。",
    "crumbs": [
      "**附录**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Markdown</span>"
    ]
  },
  {
    "objectID": "body/A01_markdown.html#语法速览",
    "href": "body/A01_markdown.html#语法速览",
    "title": "7  Markdown",
    "section": "7.2 语法速览",
    "text": "7.2 语法速览\n\n\n\n\n\n\nFigure 7.1: Markdown 语法对照\n\n\n\n你可以在如下网站按部就班地学习 Markdown 的基本用法，大概五分钟后你就可以掌握常用 Markdown 语法规则了：\n\nhttps://www.markdowntutorial.com/zh-cn",
    "crumbs": [
      "**附录**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Markdown</span>"
    ]
  },
  {
    "objectID": "body/A01_markdown.html#markdown-基本语法",
    "href": "body/A01_markdown.html#markdown-基本语法",
    "title": "7  Markdown",
    "section": "7.3 Markdown 基本语法",
    "text": "7.3 Markdown 基本语法\n\nSource: markdownguide.org/cheat-sheet/\n\n这份 Markdown 备忘单介绍了常用的 Markdown 语法。为了便于您快速了解基本的语法规则，这里略去了很多细节信息，详情参见：基础语法 和 扩展语法。\n以下是 John Gruber 原始设计文档中列出的基本元素，所有 Markdown 应用程序都支持这些元素。\n\n\n\n\n\n\n\n元素\nMarkdown 语法\n\n\n\n\n标题\n# 一级标题## 二级标题### 三级标题\n\n\n粗体\n**粗体文本**\n\n\n斜体\n*斜体文本*\n\n\n引用块\n&gt; 引用内容\n\n\n有序列表\n1. 第一项2. 第二项3. 第三项\n\n\n无序列表\n- 第一项  -  第一条- 第二项- 第三项\n\n\n代码高亮显示\n`代码` (`xtreg` → xtreg)\n\n\n水平线\n---\n\n\n链接\n[连享会主页](https://www.lianxh.cn)\n\n\n图片\n![图片标题](/Fig/image.jpg) 或 ![](图片网址)\n\n\n\n\n7.3.1 表格\n| 命令    | 范例                 |\n| :------ | :------------------- |\n| xtreg   | `xtreg y x, fe`      |\n| reghdfe | `reghdfe y x, a(id)` |\n\n\n\n命令\n范例\n\n\n\n\nxtreg\nxtreg y x, fe\n\n\nreghdfe\nreghdfe y x, a(id)\n\n\n\n\n\n7.3.2 数学公式\n\n单行数学公式用 $$ 符号包围起来；\n行内数学公式用 $ 符号包围起来；\n包围符号内侧不要有空格，否则在有些 Markdown 编辑器中无法正常显示公式\n\n正确：$y = f(x)$\n错误：$ y = f(x) $ 或 $y = f(x) $\n\n有关 LaTeX 数学公式的语法和工具，参见：\n\nMarkdown常用LaTex数学公式\n神器-数学公式识别工具-mathpix\n\n\n模型设定为：\n\n$$y_{it} = \\alpha_i + x_{it}\\beta + u_{it}$$\n\n其中，$y_{it}$ 为被解释变量，$\\alpha_i$ 为个体效应。\n模型设定为：\n\\[y_{it} = \\alpha_i + x_{it}\\beta + u_{it}\\]\n其中，\\(y_{it}\\) 为被解释变量，\\(\\alpha_i\\) 为个体效应。\n\n\n7.3.3 代码块\n```python\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'A': [1, 2, 3],\n    'B': [4, 5, 6]\n})\n```\n\n```stata\nsysuse \"auto.dta\", clear\nregress mpg weight\ndisplay \"Results: \" 2 + 3\n```\n渲染效果：\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'A': [1, 2, 3],\n    'B': [4, 5, 6]\n})\nsysuse \"auto.dta\", clear\nregress mpg weight\ndisplay \"Results: \" 2 + 3\n\n\n7.3.4 扩展阅读\n\n初虹, 2024, 让「记录」变得简单：Markdown使用详解, 连享会 No.1456.\n初虹, 2021, 学术论文写作新武器：Markdown-上篇, 连享会 No.603.\n初虹, 2021, 学术论文写作新武器：Markdown-下篇, 连享会 No.604.\n初虹, 2021, 学术论文写作新武器：Markdown-中篇, 连享会 No.605.\n连玉君, 2024, VScode插件：安装、配置和使用, 连享会 No.1490.\n连玉君, 2024, VScode：实用 Markdown 插件推荐, 连享会 No.1390.",
    "crumbs": [
      "**附录**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Markdown</span>"
    ]
  },
  {
    "objectID": "body/A01_markdown.html#marp-幻灯片",
    "href": "body/A01_markdown.html#marp-幻灯片",
    "title": "7  Markdown",
    "section": "7.4 marp 幻灯片",
    "text": "7.4 marp 幻灯片\n在 VScode 中安装 Marp 插件后，你可以使用 Markdown 语法来创建幻灯片。使用 Marp 最大的好处是你可以专注于内容，而不必担心幻灯片的格式和样式。Marp 会自动将你的 Markdown 文档转换为美观的幻灯片。\n\n\n7.4.1 模版 1：最基本的设定\n以下是一个简单的 Marp 幻灯片模板，你只需要新建一个 .md 文件，输入如下内容，然后在 VScode 中打开该文件即可：\n---\nmarp: true\n---\n\n# 幻灯片标题\n\n---\n\n## 第一页幻灯片\n\n- xxx\n- xxx\n\n---\n\n## 第二页幻灯片\n\n- xxx\n- xxx\n\n\n7.4.2 模版 2：更多的设定\n该模板的主要功能包括：\n\n幻灯片的标题、作者、页码、脚注\n幻灯片的字号\n标题的颜色和页面背景颜色\n\n---\nmarp: true\nsize: 16:9      # 宽版：4:3\npaginate: true  # 显示页码\nfooter: '脚注文本或 [xxx](URL)'\n---\n\n&lt;style&gt;\n/*一级标题局中*/\nsection.lead h1 {\n  text-align: center; /*其他参数：left, right*/\n}\nsection {\n  font-size: 22px;      /* 正文字号 */\n}\nh1 {\n  color: blackyellow;   /* 标题的颜色 */\n  /*font-size: 28px; */ /* 标题的字号, 其它标题也可以这样修改 */\n}\nh2 {\n  color: green;\n}\nh3 {\n  color: darkblue;\n}\n\n/* 右下角添加页码 */\nsection::after {\n  content: attr(data-marpit-pagination) '/' attr(data-marpit-pagination-total); \n}\nheader,\nfooter {\n  position: absolute;\n  left: 50px;\n  right: 50px;\n  height: 25px;\n}\n&lt;/style&gt;\n\n&lt;!--顶部文字--&gt;\n[lianxh.cn](https://www.lianxh.cn/news/46917f1076104.html) \n\n&lt;br&gt;\n\n&lt;!--封面图片--&gt;\n![bg right:50% w:400 brightness:. sepia:50%](https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/20220722114227.png) \n\n&lt;!--幻灯片标题--&gt;\n# Marp 参数设置\n\n&lt;br&gt;\n&lt;br&gt;\n\n&lt;!--作者信息--&gt;\n[连玉君](https://www.lianxh.cn) (中山大学)\narlionn@163.com\n\n&lt;br&gt;\n---\n&lt;!-- backgroundColor: #FFFFF9 --&gt;\n## 第一页幻灯片\n\n- 背景是淡黄色的，可以根据需要修改颜色\n\n---\n&lt;!-- backgroundColor:white --&gt;\n## 第二页幻灯片\n\n- 背景是纯白色\n- 下面的图片在右侧，占页面 60% 的宽度\n\n![bg right:60% w:800](图片网址)\n详情参见：\n\n宋森安, 2021, 用Markdown制作幻灯片-五分钟学会Marp（上篇）, 连享会 No.656.\n宋森安, 2021, 用Markdown制作幻灯片-五分钟学会Marp（下篇）, 连享会 No.657.\n连玉君, 2022, Marp幻灯片模板：用Markdown快速写幻灯片, 连享会 No.1059.",
    "crumbs": [
      "**附录**",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Markdown</span>"
    ]
  },
  {
    "objectID": "body/A02_JupyterNotebook.html",
    "href": "body/A02_JupyterNotebook.html",
    "title": "8  Jupyter Notebook",
    "section": "",
    "text": "8.1 Python 代码\nQuarto book 也支持 .ipynb 文件。你可以在 Quarto book 中直接使用 Jupyter Notebook 文件。\nJupyter Notebook 文档中的代码块可以直接运行，输出的图片会被自动存储在 ./_static 目录下。当你通过 github pages 发布时，这些图片会被自动上传到 GitHub。\n一个 Jupyter Notebook 文档中可以支持多种编程语言。\n绘制函数图 \\(y = x^2\\) 的代码如下：\n# 绘制一幅简单的函数图\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(-10, 10, 200)\ny = x ** 2\n\nplt.figure(figsize=(3, 2.5))\nplt.plot(x, y)\nplt.title(\"y = x^2\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.grid(True)\nplt.show()",
    "crumbs": [
      "**附录**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Jupyter Notebook</span>"
    ]
  },
  {
    "objectID": "body/A02_JupyterNotebook.html#stata-代码",
    "href": "body/A02_JupyterNotebook.html#stata-代码",
    "title": "8  Jupyter Notebook",
    "section": "8.2 Stata 代码",
    "text": "8.2 Stata 代码\n使用 Stata 自带的 sysuse auto 数据集，绘制汽车价格与重量的散点图：\n\nsysuse \"auto.dta\", clear\ntwoway scatter mpg weight, scheme(cleanplots)\n\n(1978 automobile data)",
    "crumbs": [
      "**附录**",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Jupyter Notebook</span>"
    ]
  }
]